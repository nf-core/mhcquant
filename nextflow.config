/*
 * -------------------------------------------------
 *  nf-core/mhcquant Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

// Global default params, used in configs
params {

  // Boilerplate options
  name = false
  multiqc_config = "$baseDir/assets/multiqc_config.yaml"
  email = false
  maxMultiqcEmailFileSize = 25.MB
  plaintext_email = false
  monochrome_logs = false
  help = false
  igenomes_base = "./iGenomes"
  tracedir = "${params.outdir}/pipeline_info"
  awsqueue = false
  awsregion = 'eu-west-1'
  igenomesIgnore = true
  custom_config_version = 'master'
  custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
  hostnames = false
  config_profile_description = false
  config_profile_contact = false
  config_profile_url = false
  
  // workflow options
  help = false
  mzmls = "data/*.mzML"
  fasta = "data/*.fasta"
  predict_class_1 = false
  predict_class_2 = false
  refine_fdr_on_predicted_subset = false
  subset_affinity_threshold = 500
  class_1_alleles = "data/class_1_alleles"
  class_2_alleles = "data/class_2_alleles"
  include_proteins_from_vcf = false
  vcf = "data/*.vcf"
  variant_reference = "GRCH38"
  variant_annotation_style = "SNPEFF"
  variant_indel_filter = false
  variant_frameshift_filter = false
  variant_snp_filter = false
  outdir = './results'

  // workflow defaults
  peptide_min_length = 8
  peptide_max_length = 12
  fragment_mass_tolerance = 0.02
  precursor_mass_tolerance = 5
  fragment_bin_offset = 0
  fdr_threshold = 0.01
  fdr_level = 'peptide-level-fdrs'
  number_mods = 3
  num_hits = 1
  digest_mass_range = "800:2500"
  pick_ms_levels = 2
  run_centroidisation = false
  prec_charge = '2:3'
  activation_method = 'ALL'
  enzyme = 'unspecific cleavage'
  fixed_mods = ''
  max_rt_alignment_shift = 300
  spectrum_batch_size = 500
  variable_mods = 'Oxidation (M)'
  tracedir = "${params.outdir}/pipeline_info"
  description_correct_features = 0
  klammer = false

  // Options: AWSBatch
  clusterOptions = false
  awsqueue = false
  awsregion = 'eu-west-1'

  // Options: Custom config
  config_profile_description = false
  config_profile_contact = false
  config_profile_url = false

  custom_config_version = 'master'
  custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
}

// Container slug. Stable releases should specify release tag!
// Developmental code should specify :dev
process.container = 'nfcore/mhcquant:1.3'

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
  includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
  System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

profiles {
  awsbatch { includeConfig 'conf/awsbatch.config' }
  conda { process.conda = "$baseDir/environment.yml" }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  docker { docker.enabled = true }
  singularity { singularity.enabled = true }
  test { includeConfig 'conf/test.config' }
}

// Load igenomes.config if required
if(!params.igenomesIgnore){
  includeConfig 'conf/igenomes.config'
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}

manifest {
  name = 'nf-core/mhcquant'
  author = 'Leon Bichmann'
  homePage = 'https://github.com/nf-core/mhcquant'
  description = 'Identify and quantify peptides from mass spectrometry raw data'
  mainScript = 'main.nf'
  nextflowVersion = '>=0.32.0'
  version = '1.3'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
