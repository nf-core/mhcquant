/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

}

/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                Nf-core module configs
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/

process {

    withName: 'THERMORAWFILEPARSER' {
        ext.args   = "-f 2"
        ext.prefix = {"${raw.baseName}"}
        publishDir = [
            path: {"${params.outdir}"},
            mode: params.publish_dir_mode,
            enabled: false
        ]
    }

    withName: 'UNTAR' {
        publishDir  = [
            path: {"${params.outdir}"},
            mode: params.publish_dir_mode,
            enabled: false
        ]
    }

    withName: 'UNZIP' {
        publishDir  = [
            path: {"${params.outdir}"},
            mode: params.publish_dir_mode,
            enabled: false
        ]
    }

    withName: 'GUNZIP' {
        publishDir  = [
            path: {"${params.outdir}"},
            mode: params.publish_dir_mode,
            enabled: false
        ]
    }

    withName: 'OPENMS_FILEFILTER' {
        ext.prefix  = {"${file.baseName}_filtered"}
        ext.args    = "-peak_options:rm_pc_charge 0"
        publishDir  = [
            enabled: false
        ]
    }

    withName: 'OPENMS_DECOYDATABASE' {
        ext.args    = [
            "-decoy_string DECOY_",
            "-decoy_string_position prefix",
            "-enzyme 'no cleavage'"
            ].join(' ').trim()
        publishDir  = [
            enabled: false
        ]
    }

    withName: 'OPENMS_PEAKPICKERHIRES' {
        ext.prefix  = {"${mzml.baseName}_picked"}
        ext.args    = "-algorithm:ms_levels ${params.pick_ms_levels}"
        publishDir  = [
            enabled: false
        ]
    }

    withName: 'OPENMSTHIRDPARTY_COMETADAPTER' {
        ext.prefix  = {"${mzml.baseName}"}
        ext.args    = { [
            (params.default_params_file_comet != " ") ? "-default_params_file ${params.default_params_file_comet}" : "",
            "-pin_out ${mzml.baseName}_pin.tsv",
            "-instrument ${params.instrument}",
            "-spectrum_batch_size ${params.spectrum_batch_size}",
            "-activation_method ${params.activation_method}",
            "-precursor_mass_tolerance ${params.precursor_mass_tolerance}",
            "-precursor_error_units ${params.precursor_error_units}",
            "-fragment_mass_tolerance ${params.fragment_mass_tolerance}",
            "-fragment_bin_offset ${params.fragment_bin_offset}",
            "-num_hits ${params.num_hits}",
            "-digest_mass_range ${params.digest_mass_range}",
            "-max_variable_mods_in_peptide ${params.number_mods}",
            "-missed_cleavages 0",
            "-precursor_charge ${params.prec_charge}",
            "-fixed_modifications ${params.fixed_mods.tokenize(',').collect {"'${it}'"}.join(" ")}",
            "-variable_modifications ${params.variable_mods.tokenize(',').collect {"'${it}'"}.join(" ")}",
            "-enzyme '${params.enzyme}'",
            "-use_X_ions ${params.use_x_ions}",
            "-use_Z_ions ${params.use_z_ions}",
            "-use_A_ions ${params.use_a_ions}",
            "-use_C_ions ${params.use_c_ions}",
            "-use_NL_ions ${params.use_NL_ions}",
            params.remove_precursor_peak ? "-remove_precursor_peak yes" : "",
        ].join(' ').trim() }
        publishDir = [
            path: {"${params.outdir}/intermediate_results/comet"},
            mode: params.publish_dir_mode,
            pattern: '*.tsv'
        ]
    }

    withName: 'OPENMS_PEPTIDEINDEXER' {
        ext.prefix  = {"${meta.id}_idx"}
        ext.args = [
                "-decoy_string DECOY",
                "-enzyme:specificity none"
                ].join(' ').trim()
        publishDir  = [
            enabled: false
        ]
    }

    withName: 'OPENMS_IDMERGER|OPENMS_IDMERGER_QUANT' {
        ext.args    = [
            "-annotate_file_origin true",
            "-merge_proteins_add_PSMs"
            ].join(' ').trim()
        publishDir  = [
            enabled: false
        ]
    }
    withName: 'OPENMS_IDMERGER_GLOBAL' {
        label = 'process_high_memory'
        ext.args    = [
            "-annotate_file_origin true",
            "-merge_proteins_add_PSMs"
            ].join(' ').trim()
        publishDir  = [
            enabled: false
        ]
    }

    withName: 'OPENMS_IDFILTER_Q_VALUE' {
        ext.prefix  = {"${meta.id}_pout_filtered"}
        ext.args    = [
            "-remove_decoys",
            "-precursor:length '${params.peptide_min_length}:${params.peptide_max_length}'",
            "-delete_unreferenced_peptide_hits",
            (params.fdr_threshold == '0.01') ? "-score:peptide 0.05" : "-score:peptide " + params.fdr_threshold
        ].join(' ').trim()
        publishDir  = [
            path: {"${params.outdir}/intermediate_results/rescoring"},
            mode: params.publish_dir_mode,
            pattern: '*.idXML'
        ]
    }

    withName: 'OPENMS_IDFILTER_Q_VALUE_GLOBAL' {
        label = 'process_high_memory'
        ext.prefix  = {"${meta.id}_pout_filtered"}
        ext.args    = [
            "-remove_decoys",
            "-precursor:length '${params.peptide_min_length}:${params.peptide_max_length}'",
            "-delete_unreferenced_peptide_hits",
            (params.fdr_threshold == '0.01') ? "-score:pep 0.05" : "-score:pep " + params.fdr_threshold
        ].join(' ').trim()
        publishDir  = [
            enabled: false
        ]
    }

    withName: 'OPENMS_IDFILTER_GLOBAL' {
        label = 'process_high_memory'
        ext.prefix  = {"${meta.id}_pout_filtered"}
        ext.args    = [
            "-remove_decoys",
            "-precursor:length '${params.peptide_min_length}:${params.peptide_max_length}'",
            "-delete_unreferenced_peptide_hits",
            (params.fdr_threshold == '0.01') ? "-score:peptide 0.05" : "-score:peptide " + params.fdr_threshold
        ].join(' ').trim()
        publishDir  = [
            path: {"${params.outdir}/intermediate_results/rescoring"},
            mode: params.publish_dir_mode,
            pattern: '*.idXML'
        ]
    }

    withName: 'OPENMS_IDFILTER_FOR_SPECLIB' {
        ext.prefix  = {"${meta.id}_comet_fdr_filtered"}
        publishDir  = [
            enabled: false
        ]
    }

    withName: 'EASYPQP_CONVERT' {
        publishDir  = [
            enabled: false
        ]
    }

    withName: 'EASYPQP_LIBRARY' {
        ext.args    = [
            "--perform_rt_calibration False",
            "--perform_im_calibration False",
            "--nofdr",
        ].join(' ').trim()
        publishDir  = [
            path: {"${params.outdir}/spectrum_library"},
            mode: params.publish_dir_mode,
            pattern: '*speclib.tsv'
        ]
    }

    withName: 'OPENMS_IDFILTER_QUANT' {
        ext.prefix  = {"${meta.spectra}_fdr_filtered"}
        ext.args    = "-best:spectrum_per_peptide 'sequence+charge+modification'"
        publishDir  = [
            enabled: false
        ]
    }

    withName: 'OPENMS_IDRIPPER' {
        publishDir  = [
            enabled: false
        ]
    }

    withName: 'MULTIQC' {
        ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

}

process {
    if (params.quantify) {
        withName: 'NFCORE_MHCQUANT:MHCQUANT:QUANT:OPENMS_IDSCORESWITCHER' {
            ext.args   = [
                "-new_score COMET:xcorr",
                "-new_score_orientation higher_better",
                "-old_score q-value"
            ].join(' ').trim()
            publishDir  = [
                mode: params.publish_dir_mode,
                pattern: '*.idXML',
                enabled: false
            ]
        }
    }
}

process {
    if (params.rescoring_engine == 'mokapot') {
        withName: 'NFCORE_MHCQUANT:MHCQUANT:RESCORE:OPENMS_IDSCORESWITCHER' {
            ext.prefix  = {"${meta.id}"}
            ext.args   = [
                "-new_score q-value",
                "-new_score_orientation lower_better",
                "-old_score expect"
            ].join(' ').trim()
            publishDir  = [
                mode: params.publish_dir_mode,
                pattern: '*.idXML',
                enabled: false
            ]
        }
    }
}

/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                Local module configs
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/

process {

    withName: 'TDF2MZML' {
        publishDir  = [
            enabled: false
        ]
    }

    withName: 'PYOPENMS_CHROMATOGRAMEXTRACTOR' {
        publishDir  = [
            enabled: false
        ]
    }

    withName: 'OPENMS_MAPALIGNERIDENTIFICATION' {
        ext.args    = [
            "-model:type linear",
            "-algorithm:max_rt_shift ${params.max_rt_alignment_shift}"
            ].join(' ').trim()
        publishDir = [
            path: {"${params.outdir}/intermediate_results/alignment"},
            mode: params.publish_dir_mode,
            pattern: '*.trafoXML'
        ]
    }

    withName: 'OPENMS_MAPRTTRANSFORMERMZML|OPENMS_MAPRTTRANSFORMERIDXML' {
        ext.prefix  = {"${meta.spectra}_aligned"}
        publishDir  = [
            enabled: false
        ]
    }

    withName: 'OPENMS_IDMASSACCURACY' {
        ext.prefix  = {"${meta.spectra}"}
        ext.args    = [
            (params.precursor_error_units == 'ppm') ? "-precursor_error_ppm": "",
            "-fragment_mass_tolerance ${params.fragment_mass_tolerance}"
        ].join(' ').trim()
        publishDir  = [
            enabled: false
        ]
    }

    withName: 'DATAMASH_HISTOGRAM' {
        ext.prefix  = {"${meta.spectra}"}
        publishDir  = [
            enabled: false
        ]
    }

    withName: 'MS2RESCORE' {
        ext.args   = [
            "--ms2_tolerance ${2 * params.fragment_mass_tolerance}",
            "--ms2pip_model ${params.ms2pip_model}",
            "--ms2pip_model_dir ${params.ms2pip_model_dir}",
            "--rescoring_engine ${params.rescoring_engine}",
            params.feature_generators.trim() ? "--feature_generators ${params.feature_generators}" : ''
        ].join(' ').trim()
        publishDir = [
            [path: "${params.outdir}/intermediate_results/rescoring",
                mode: params.publish_dir_mode,
                pattern: '*.idXML'],
            [path: "${params.outdir}/multiqc/ms2rescore",
                mode: params.publish_dir_mode,
                pattern: '*.html']
        ]
    }

    withName: 'OPENMS_PERCOLATORADAPTER' {
        ext.args    = { [
            "-seed 4711",
            "-trainFDR 0.05",
            "-testFDR 0.05",
            "-enzyme no_enzyme",
            "-subset_max_train ${params.subset_max_train}",
            "-post_processing_tdc",
            "-weights ${meta.id}_percolator_feature_weights.tsv",
            (params.fdr_level != 'psm_level_fdrs') ? "-" + params.fdr_level : ""
        ].join(' ').trim() }
        publishDir  = [
            path: {"${params.outdir}/intermediate_results/rescoring"},
            mode: params.publish_dir_mode,
            pattern: '*.idXML'
        ]
    }

    withName: 'OPENMS_PERCOLATORADAPTER_GLOBAL' {
        label = 'process_high'
        ext.args    = [
            "-seed 4711",
            "-trainFDR 0.05",
            "-testFDR 0.05",
            "-enzyme no_enzyme",
            "-subset_max_train ${params.subset_max_train}",
            "-post_processing_tdc",
            (params.fdr_level != 'psm_level_fdrs') ? "-" + params.fdr_level : ""
        ].join(' ').trim()
        publishDir  = [
            enabled: false
        ]
    }

    withName: 'OPENMS_PSMFEATUREEXTRACTOR' {
        publishDir  = [
            path: {"${params.outdir}/intermediate_results/rescoring"},
            mode: params.publish_dir_mode,
            pattern: '*.idXML'
        ]
    }

    withName: 'OPENMS_MZTABEXPORTER' {
        ext.prefix  = {"${meta.id}"}
        publishDir  = [
            path: {"${params.outdir}"},
            mode: params.publish_dir_mode,
            pattern: '*.mzTab'
        ]
    }

    withName: 'OPENMS_FEATUREFINDERIDENTIFICATION' {
        ext.args    = [
                "-extract:mz_window ${params.quantification_mz_window}",
                "-extract:rt_window ${params.quantification_rt_window}",
                "-detect:mapping_tolerance ${params.quantification_mapping_tolerance}",
                "-detect:peak_width ${params.quantification_peak_width}",
                "-detect:min_peak_width ${params.quantification_min_peak_width}"
            ].join(' ').trim()
        publishDir  = [
            path: {"${params.outdir}/intermediate_results/features"},
            mode: params.publish_dir_mode,
            pattern: '*.featureXML'
        ]
    }

    withName: 'OPENMS_FEATURELINKERUNLABELEDKD' {
        publishDir  = [
            enabled: false
        ]
    }

    withName: 'OPENMS_TEXTEXPORTER' {
        publishDir  = [
            enabled: false
        ]
    }

    withName: 'SUMMARIZE_RESULTS' {
        ext.args   = "--columns sequence,score,score_type,psm,rt,mz,charge,accessions,aa_before,aa_after,start,end,COMET:deltaCn,COMET:deltaLCn,COMET:lnExpect,COMET:xcorr,rt_diff_best,observed_retention_time_best,predicted_retention_time_best,spec_pearson,std_abs_diff,ccs_observed_im2deep,ccs_predicted_im2deep,ccs_error_im2deep"
        publishDir  = [
            path: {"${params.outdir}"},
            mode: params.publish_dir_mode,
            pattern: "*.tsv"
        ]
    }

    withName: 'OPENMS_TEXTEXPORTER_GLOBAL' {
        label = 'process_high_memory'
        publishDir  = [
            path: {"${params.outdir}/global_fdr"},
            mode: params.publish_dir_mode,
            pattern: '*.tsv'
        ]
    }

    withName: 'OPENMS_IDCONFLICTRESOLVER' {
        publishDir  = [
            path: {"${params.outdir}/intermediate_results/features"},
            mode: params.publish_dir_mode,
            pattern: '*.consensusXML',
            enabled: false
        ]
    }
}

process {

    if (params.annotate_ions) {
        withName: 'PYOPENMS_IONANNOTATOR' {
            ext.args   = [
                    "--precursor_charge ${params.prec_charge}",
                    "--fragment_mass_tolerance ${params.fragment_mass_tolerance}",
                    "--remove_precursor_peak ${params.remove_precursor_peak}"
                ].join(' ').trim()
                publishDir  = [
                    path: {"${params.outdir}/intermediate_results/ion_annotations"},
                    mode: params.publish_dir_mode,
                    pattern: '*.tsv'
                ]
        }
    }
}
